/*
 * This source file was generated by the Gradle 'init' task
 */
package com.chess;


import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.stream.Collectors;

public class ChessServiceTest {

    @Test
    public void testStartNewChessGame() {
        ChessService chessService = new ChessService();
        ChessBoard chessBoard = chessService.startNewChessGame();
        Assertions.assertNotNull(chessBoard);
    }

    @Test
    public void testGetAllPossibleMovesForCell_Pawn() {
        ChessService chessService = new ChessService();
        ChessBoard chessBoard = chessService.startNewChessGame();
        Assertions.assertNotNull(chessBoard);
        String cellId = "D5";
        String expectPossibleMoves = "D6";
        chessBoard.placePieceAtCell(PieceType.PAWN, cellId);
        List<Cell> possibleMoves = chessService.getAllPossibleMovesForCell(chessBoard, cellId);
        Assertions.assertNotNull(possibleMoves);
        Assertions.assertEquals(expectPossibleMoves, possibleMoves.stream().map(Cell::getId).collect(Collectors.joining(", ")));
    }

    @Test
    public void testGetAllPossibleMovesForCell_King() {
        ChessService chessService = new ChessService();
        ChessBoard chessBoard = chessService.startNewChessGame();
        Assertions.assertNotNull(chessBoard);
        String cellId = "D5";
        List<String> expectedPossibleMoves = List.of(
                "D4", "D6", "C5", "E5", "C4", "E6", "C6", "E4"
        );
        chessBoard.placePieceAtCell(PieceType.KING, cellId);
        List<Cell> possibleMoves = chessService.getAllPossibleMovesForCell(chessBoard, cellId);
        Assertions.assertNotNull(possibleMoves);
        List<String> actualPossibleMoves = possibleMoves.stream().map(Cell::getId).toList();
        Assertions.assertAll(
                () -> Assertions.assertEquals(expectedPossibleMoves.size(), actualPossibleMoves.size()),
                () -> Assertions.assertTrue(actualPossibleMoves.containsAll(expectedPossibleMoves))
        );
    }

    @Test
    public void testGetAllPossibleMovesForCell_Queen() {
        ChessService chessService = new ChessService();
        ChessBoard chessBoard = chessService.startNewChessGame();
        Assertions.assertNotNull(chessBoard);
        String cellId = "E4";
        List<String> expectedPossibleMoves = List.of(
                "A8", "B7", "C6", "D5", "F3", "G2", "H1",
                "B1", "C2", "D3", "F5", "G6", "H7",
                "A4", "B4", "C4", "D4", "F4", "G4", "H4",
                "E1", "E2", "E3", "E5", "E6", "E7", "E8"
                );
        chessBoard.placePieceAtCell(PieceType.QUEEN, cellId);
        List<Cell> possibleMoves = chessService.getAllPossibleMovesForCell(chessBoard, cellId);
        Assertions.assertNotNull(possibleMoves);
        List<String> actualPossibleMoves = possibleMoves.stream().map(Cell::getId).toList();
        Assertions.assertAll(
                () -> Assertions.assertEquals(expectedPossibleMoves.size(), actualPossibleMoves.size()),
                () -> Assertions.assertTrue(actualPossibleMoves.containsAll(expectedPossibleMoves))
        );
    }
}
